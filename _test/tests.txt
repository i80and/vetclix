Vetclix Database
================

Using the Database module
--------------------------

    >>> import database
    >>> db = database.Database('foo.db')

    >>> tags = database.tokenize(['Bobby Tables, 4982 New Appledam. bobtables@example.com, 612-555-2315.', 'This is a mysterious client indeed'])
    >>> assert tags == {'bobby', 'tables', '4982', 'new', 'appledam', 'bobtables@example.com', '612-555-2315', 'this', 'is', 'a', 'mysterious', 'client', 'indeed'}

A Whirlwind Tour of the Client Class
-------------------------------------

    >>> bob = database.Client('Bobby Tables',
    ...                       address='4982 New Appledam, Fairsworth',
    ...                       recid='73c3a3fd-9def-4154-9f4a-067069b58d5e')

Contact data is stored as a set of triplets.

    >>> bob.add_contact_info(('612-555-2315', 'phone', 'Home (preferred)'))
    >>> bob.add_contact_info(('bobtables@example.com', 'email', ''))
    >>> bob.add_contact_info(('612-555-8914', 'phone', 'Work'))
    >>> bob.remove_contact_info(('612-555-8914', 'phone', 'Work'))

    >>> bob.name
    'Bobby Tables'
    >>> assert bob.tags == {'bobby', 'tables', '4982', 'new', 'appledam', 'fairsworth', '612-555-2315', 'bobtables@example.com'}

There is a way to get a convenient mapping between SQL columns and data values:

    >>> bob.get_column_data()
    (('recid', '73c3a3fd-9def-4154-9f4a-067069b58d5e'), ('name', 'Bobby Tables'), ('address', '4982 New Appledam, Fairsworth'))

The previous has a contrived record id.  Normally, a random UUID is chosen.
    >>> import uuid
    >>> han = database.Client('Han Solo')
    >>> assert uuid.UUID(han.recid)

A Patient Analysis at the Patient Class
---------------------------------------
    >>> ruff = database.Patient('Ruff',
    ...                         recid='63c8b75a-ea00-4c07-ac81-5ef75d3db298',
    ...                         species='Canine',
    ...                         breed='Labrador',
    ...                         description='Chocolate labrador, 80 lbs, black splotch on left eye.',
    ...                         gender='Neutered')
    >>> ruff.get_column_data()
    (('recid', '63c8b75a-ea00-4c07-ac81-5ef75d3db298'), ('name', 'Ruff'), ('species', 'Canine'), ('breed', 'Labrador'), ('gender', 'Neutered'), ('description', 'Chocolate labrador, 80 lbs, black splotch on left eye.'))
    >>> assert ruff.tags == {'ruff', 'canine', 'labrador', 'chocolate', '80', 'lbs', 'black', 'splotch', 'on', 'left', 'eye', 'neutered'}

Database Workings
-----------------
    >>> bob.add_pet(ruff)
    >>> db.set_patient(ruff)
    >>> db.set_client(bob)

The close() method will flush any uncommitted operations to disk and close the
file handle.

    >>> db.close()
